#!/bin/bash

#
# A small wrapper script that can be used as interpreter for .mmo files
# with the binfmt facility. Simply register this file to the binfmt service
# with a string of the form
#
#   :mmix:E::mmo::<path to binfmt-mmix>:
#
# either by piping this string directly to /proc/sys/fs/binfmt_misc/register:
#
#   echo ":mmix:E::mmo::<path to binfmt-mmix>:" >
#     /proc/sys/fs/binfmt_misc/register
#
# or by creating an entry in a configuration file /etc/binfmt.d/mmix.conf
# (or whatever name you choose).
#

set -u

#
# Cleanup:
#

saved_state="$(stty -g)"
temporary="$(mktemp -d "/dev/shm/$(basename $1).XXXXXXXX")"
worker_pid=

function cleanup {
  stty "${saved_state}"
  rm -r "${temporary}"
  if [ -n "${worker_pid}" ]; then
    kill -9 ${worker_pid}
  fi
}
trap cleanup EXIT


#
# Query command line parameters:
#

tty_raw_mode=false
tty_noblock=false
spawn_worker=false
declare -a args
declare -a interpret

until [[ "$@" == "" ]]; do
  if [[ "$1" == "-mmix" ]]; then
    shift
    if [[ "$1" == "-tty-raw-mode" ]]; then
      tty_raw_mode=true
    elif [[ "$1" == "-tty-noblock" ]]; then
      tty_raw_mode=true
      tty_noblock=true
    elif [[ "$1" == "-spawn-worker" ]]; then
      spawn_worker=true
    else
      interpret+=( "$1" )
    fi

  else

    args+=( "$1" )

  fi
  shift
done


#
# If possible, query binary for configuration options:
#

if command -v mmix-objdump >/dev/null 2>&1; then

  if mmix-objdump -t "${args[0]}" | grep -q "MM:Interpreter:TTY_RAW_MODE"; then
    tty_raw_mode=true
  fi

  if mmix-objdump -t "${args[0]}" | grep -q "MM:Interpreter:TTY_NOBLOCK"; then
    tty_noblock=true
  fi

  if mmix-objdump -t "${args[0]}" | grep -q "MM:Interpreter:SPAWN_WORKER"; then
    spawn_worker=true
  fi

fi


#
# Set up environment and call interpreter:
#

if $tty_raw_mode; then
  stty raw -echo
fi

if $tty_noblock; then
  stty -icanon min 0 time 0
fi

function worker {
  while true; do
    if read line < "$temporary/worker.stdin.fifo"; then
      bash -c "$line" > "$temporary/worker.stdout.fifo" 2> /dev/null
    fi
  done
}

if $spawn_worker; then
  mkfifo "$temporary/worker.stdin.fifo"
  mkfifo "$temporary/worker.stdout.fifo"
  worker &
  worker_pid=$!
  args=( "${args[0]}" "__mm_init_worker=$temporary" "${args[@]:1}" )
fi

mmix "${interpret[@]}" "${args[@]}"
exit $?
