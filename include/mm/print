%%
% MMIX support library for various purposes.
%
% Copyright (C) 2013-2018 Matthias Maier <tamiko@kyomu.43-1.org>
%
% Permission is hereby granted, free of charge, to any person
% obtaining a copy of this software and associated documentation files
% (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of the Software,
% and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be
% included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%%

#ifndef MM_PRINT
#define MM_PRINT

            PREFIX      :MM:

%
% :MM:Print:
%
% Various printing subroutines. Mainly useful for diagnostics.
%
% - Stable ABI, partially implemented -
%
% This header file defines:
%   :MM:Print:Str (StrG)
%   :MM:Print:StrLn (StrLnG)
%   :MM:Print:Reg (RegG)
%   :MM:Print:RegLn (RegLnG)
%   :MM:Print:Byte (ByteG)
%   :MM:Print:Signed (SignedG)
%   :MM:Print:Unsigned (UnsignedG)
%   :MM:Print:MemLn
%   :MM:Print:Ln
%

%%
% :MM:Print:Str
% :MM:Print:StrLn
%   Print The null terminated string at memory location arg0 on stdout
%   (Str), or print and append a newline (StrLn).
%
%   PUSHJ
%   arg0 - pointer to null terminated string
%   no return value
%
% :MM:Print:StrG
% :MM:Print:StrLnG
%   Print The null terminated string at memory location $255 on stdout
%   (StrG), or print and append a newline (StrLnG).
%   The content of $255 is preserved.
%
%   PUSHJ (,$255)
%   no return value
%
Print:Str   IS          :MM:__PRINT:Str
Print:StrLn IS          :MM:__PRINT:StrLn
Print:StrG  IS          :MM:__PRINT:StrG
Print:StrLnG IS         :MM:__PRINT:StrLnG

%
% Pretty print data and memory:
%

%%
% :MM:Print:Reg
% :MM:Print:RegLn
%   Pretty print the OCT arg0 on stdout (Reg), or pretty print and
%   append a newline (RegLn).
%
%   PUSHJ
%   arg0 - Oct to pretty print
%   no return value
%
% :MM:Print:RegG
% :MM:Print:RegLnG
%   Pretty print the content of GREG $255 on std::out. The content of
%   $255 is preserved.
%
%   PUSHJ (,$255)
%   no return value
%
Print:Reg   IS          :MM:__PRINT:Reg
Print:RegLn IS          :MM:__PRINT:RegLn
Print:RegG  IS          :MM:__PRINT:RegG
Print:RegLnG IS         :MM:__PRINT:RegLnG

%%
% :MM:Print:Byte
%   Pretty print the least significant byte of oct arg0 on stdout.
%
%   PUSHJ
%   arg0 - Oct to pretty print
%   no return value
%
% :MM:Print:ByteG
%   Pretty print the least significant byte of GREG $255 on stdout.
%   The content of $255 is preserved.
%
%   PUSHJ (,$255)
%   no return value
%
Print:Byte  IS          :MM:__PRINT:Byte
Print:ByteG IS          :MM:__PRINT:ByteG

%%
% :MM:Print:Signed
% :MM:Print:Unsigned
%   Pretty print the content of arg0 interpreted as a signed (:Signed)
%   or unsigned (:Unsigned) integer in decimal notation on stdout.
%
%   PUSHJ
%   arg0 - Oct to pretty print
%   no return value
%
% :MM:Print:ByteG
%   Pretty print the content of GREG $255 interpreted as a signed
%   (:Signed) or unsigned (:Unsigned) integer in decimal notation on
%   stdout. The content of GREG $255 is preserved.
%
%   PUSHJ (,$255)
%   no return value
%
Print:Signed IS         :MM:__PRINT:Signed
Print:SignedG IS        :MM:__PRINT:SignedG
Print:Unsigned IS       :MM:__PRINT:Unsigned
Print:UnsignedG IS      :MM:__PRINT:UnsignedG

%%
% :MM:Print:MemLn
%   Pretty print the content of the memory region defined by pointer
%   arg0 of size arg1. Outputs each OCTA on an individual line.
%
%   PUSHJ
%   arg0 - pointer to memory region
%   arg1 - size of memory region to pretty print
%   no return value
%
Print:MemLn IS         :MM:__PRINT:MemLn

%%
% :MM:Print:Ln
%   Print an newline character to stdout. The content of $255 is
%   preserved.
%
%   PUSHJ (,$255)
%   no return value
%
Print:Ln    IS          :MM:__PRINT:Ln

            PREFIX      :

#endif /* MM_PRINT */
