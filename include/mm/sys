%%
% MMIX support library for various purposes.
%
% Copyright (C) 2013-2018 Matthias Maier <tamiko@kyomu.43-1.org>
%
% Permission is hereby granted, free of charge, to any person
% obtaining a copy of this software and associated documentation files
% (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of the Software,
% and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be
% included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%%

#ifndef MM_SYS
#define MM_SYS

            PREFIX      :MM:

%
% :MM:Sys:
%
% Subroutines for program termination and related event handlers.
%
% - Stable ABI,  partially implemented -
%
% TODO: Time and wait.
%
% This header file defines:
%   :MM:Sys:Exit
%   :MM:Sys:Abort
%   :MM:Sys:AtError (AtErrorG)
%

%%
% :MM:Sys:Exit
%   Terminate program with exit code 0.
%
%   If one or more addresses were registered via a call to
%   :MM:Sys:AtExit, control jumps to these addresses via GO linkage
%   prior to program termination. The return address is stored in
%   register $0.
%
% GO, PUSHJ (,:MM:t)
%   no arguments
%   does not return
%
Sys:Exit    IS         :MM:__SYS:Exit

%%
% :MM:Sys:Abort
%   Terminate program with a nonzero exit code.
%
%   If one or more addresses were registered via a call to
%   :MM:Sys:AtExit, control jumps to these addresses via GO linkage
%   prior to program termination. The return address is stored in
%   register $0.
%
% GO, PUSHJ (,:MM:t)
%   no arguments
%   does not return
%
Sys:Abort   IS         :MM:__SYS:Abort


%%
% :MM:Sys:AtError
%
% Register As an event handler that is invoked if a non fatal (non
% internal) error condition arises in one of the :MM: subroutines.
%
% The subroutine is called via GO linkage. A return address to the
% corresponding internal library routine is stored in register $0. An
% additional return address is stored in :MM:t pointing to the caller of the
% library routine.
% Registered subroutines should not make any assumptions on register
% and memory state (except for $0 and :MM:t holding a valid return address).
%
%   #0000000000000000 - no handler is invoked, program will be
%                       terminated
%   #FFFFFFFFFFFFFFFF - print an error message and resume execution
%   any other address - jump to the specified address via GO linkage
%                       and register $0; after returning, resume
%                       execution.
%
% PUSHJ
%   arg0 - address of a subroutine that is registered to be executed
%          if an error condition is encountered.
%   no return value
%
% :MM:Sys:AtErrorG
%   variant of above function that passes arg0 through general
%   register :MM:t. The value of :MM:t is preserved.
%
% PUSHJ
%
Sys:AtError IS          :MM:__SYS:AtError
Sys:AtErrorG IS         :MM:__SYS:AtErrorG

            PREFIX      :

#endif /* MM_SYS */
