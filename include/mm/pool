%%
% MMIX support library for various purposes.
%
% Copyright (C) 2013-2018 Matthias Maier <tamiko@kyomu.43-1.org>
%
% Permission is hereby granted, free of charge, to any person
% obtaining a copy of this software and associated documentation files
% (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of the Software,
% and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be
% included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%%

#ifndef MM_POOL
#define MM_POOL

            PREFIX      :MM:

%
% :MM:Pool:
%
% Routines for dynamic memory allocation/deallocation and related
% tasks on the heap. The implementation of the heap is platfrom
% dependend.
%
% - Stable ABI, fully implemented -
%
% This header file defines:
%   :MM:Pool:Alloc (AllocJ, AllocG)
%   :MM:Pool:Dealloc (DeallocJ, DeallocG)
%   :MM:Pool:Realloc (ReallocJ)
%   :MM:Pool:Valid (ValidJ, ValidG)
%   :MM:Pool:Size (SizeJ, SizeG)
%   :MM:Pool:Copy (CopyJ)
%   :MM:Pool:Set (SetJ, SetG)
%   :MM:Pool:Zero (ZeroJ, ZeroG)
%

%%
% :MM:Pool:Alloc
%   Allocate a continuous block of memory of size arg0. The returned
%   address is octa aligned (and != #0). If allocation fails, the
%   program is terminated with an error message.
%
%   PUSHJ:
%   arg0 - requested size (in bytes)
%   retm - pointer to allocated memory
%
% :MM:Pool:AllocJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 (with no
%   return value) on failure instead of throwing an error message.
%   Same calling sequence as above.
%
% :MM:Pool:AllocG
%   This variant passes arg0 and retm through the global register :MM:t.
%
Pool:Alloc  IS          :MM:__POOL:Alloc
Pool:AllocJ IS          :MM:__POOL:AllocJ
Pool:AllocG IS          :MM:__POOL:AllocG

%%
% :MM:Pool:Dealloc
%   Deallocate a previously allocated block of memory pointed to by
%   pointer arg0. The memory region must be previously allocated with
%   :MM:Pool:Alloc, and must not be already freed. If arg0 is an
%   invalid pointer the program is terminated with an error message.
%
%   PUSHJ:
%   arg0 - pointer to allocated memory
%   no return value
%
%   Precondition:
%   arg0 must point to a valid, not yet freed memory region previously
%   allocated with :MM:Pool:Alloc
%
% :MM:Pool:DeallocJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as
%   above.
%
% :MM:Pool:AllocG
%   This variant passes arg0 through the global register :MM:t. :MM:t will
%   be set to #0 on return
%
Pool:Dealloc  IS        :MM:__POOL:Dealloc
Pool:DeallocJ IS        :MM:__POOL:DeallocJ
Pool:DeallocG IS        :MM:__POOL:DeallocG

%%
% :MM:Pool:Realloc
%   Allocate a new block of memory of arg1 bytes, copy the memory
%   pointed to by arg0 into it up to min(size(arg0),arg1) bytes.
%   Deallocate the memory region pointed to by arg0 and return the
%   pointer to the new memory region.
%
%   PUSHJ:
%   arg0 - pointer to  memory region
%   arg1 - requested size (in bytes)
%   retm - pointer to allocated memory
%
%   Precondition:
%   arg0 must point to a valid, not yet freed memory region previously
%   allocated with :MM:Pool:Alloc.
%
% :MM:Pool:ReallocJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 (with no
%   return value) on failure instead of throwing an error message.
%   Same calling sequence as above. In case of error, the memory block
%   at arg0 is guaranteed to be still allocated.
%
Pool:Realloc  IS        :MM:__POOL:Realloc
Pool:ReallocJ IS        :MM:__POOL:ReallocJ

%%
% :MM:Pool:Valid
%   Return whether arg0 points to a bunch of allocated memory. 0
%   indicates a valid pointer, -1 an invalid one.
%
%   PUSHJ:
%   arg0 - pointer to allocated memory
%   retm - 0 indicating a valid pointer, -1 otherwise
%
% :MM:Pool:ValidJ
%   This variant returns to :rJ+#4 if arg0 is a valid pointer and to
%   :rJ+#0 on failure. No return value.
%
%   PUSHJ:
%   arg0 - pointer to allocated memory
%   no return value
%
% :MM:Pool:ValidG
%   This variant passes retm through the global register :MM:t.
%
Pool:Valid  IS          :MM:__POOL:Valid
Pool:ValidJ IS          :MM:__POOL:ValidJ
Pool:ValidG IS          :MM:__POOL:ValidG

%%
% :MM:Pool:Size
%   Return the size of the allocated memory pointed to by arg0. If
%   arg0 is an invalid pointer the program is terminated with an error
%   message.
%
%   PUSHJ:
%   arg0 - pointer to allocated memory
%   retm - size of the allocated memory
%
%   Precondition:
%   arg0 must point to a valid, not yet freed memory region previously
%   allocated with :MM:Pool:Alloc
%
% :MM:Pool:SizeJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as
%   above.
%
% :MM:Pool:SizeG
%   This variant passes arg0 and retm through the global register :MM:t.
%
Pool:Size   IS          :MM:__POOL:Size
Pool:SizeJ  IS          :MM:__POOL:SizeJ
Pool:SizeG  IS          :MM:__POOL:SizeG

%%
% :MM:Pool:Copy
%   Does an octawise copy of the memory region pointed to by arg0 to
%   the memory region pointed to by arg1 of exactly
%   min(size(arg0),size(arg1)) bytes. arg0 and arg1 must point to the
%   beginning of valid, not yet freed memory regions previously
%   allocated with :MM:Pool:Alloc. For raw memory regions use
%   :MM:Pool:Copy instead.
%
%   PUSHJ:
%   arg0 - pointer to source memory
%   arg1 - pointer to destination memory
%   no return value
%
%   Precondition:
%   arg0 and arg1 must point to valid, not yet freed memory regions
%   previously allocated with :MM:Pool:Alloc.
%
% :MM:Pool:CopyJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as
%   above.
%
Pool:Copy   IS          :MM:__POOL:Copy
Pool:CopyJ  IS          :MM:__POOL:CopyJ

%%
% :MM:Pool:Set
%   Sets the entire contents of the memory block pointed to by arg0 to
%   the least significant bit of arg1. arg0 must point to the
%   beginning of valid, not yet freed memory regions previously
%   allocated with :MM:Pool:Alloc. For raw memory regions use
%   :MM:Mem:Set (SetJ) instead.
%
%   PUSHJ:
%   arg0 - pointer to memory block
%   arg1 - byte template
%   no return value
%
%   Precondition:
%   arg0 must point to a valid, not yet freed memory region previously
%   allocated with :MM:Pool:Alloc.
%
% :MM:Pool:SetJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as
%   above.
%
Pool:Set    IS          :MM:__POOL:Set
Pool:SetJ   IS          :MM:__POOL:SetJ

%%
% :MM:Pool:Zero
%   This subroutine works on memory regions allocated by Pool:Alloc.
%   It sets the entire contents of the memory block pointed to by arg0
%   to zero. arg0 must point to the beginning of a valid, not yet
%   freed memory regions previously allocated with :MM:Pool:Alloc. For
%   raw memory regions use :MM:Mem:Zero (ZeroJ) instead.
%
%   PUSHJ:
%   arg0 - pointer to memory block
%   no return value
%
%   Precondition:
%   arg0 must point to a valid, not yet freed memory region previously
%   allocated with :MM:Pool:Alloc.
%
% :MM:Pool:ZeroJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as
%   above.
%
% :MM:Pool:ZeroG
%   This variant passes arg0 through the global register :MM:t.
%
Pool:Zero   IS          :MM:__POOL:Zero
Pool:ZeroJ  IS          :MM:__POOL:ZeroJ
Pool:ZeroG  IS          :MM:__POOL:ZeroG

%%
% :MM:Pool:Rand
%   This subroutine works on memory regions allocated by Pool:Alloc.
%   It overwrites the entire contents of the memory block pointed to
%   by arg0 with random data. arg0 must point to the beginning of a
%   valid, not yet freed memory regions previously allocated with
%   :MM:Pool:Alloc. For raw memory regions use :MM:Mem:Rand (RandJ)
%   instead.
%
%   This subroutine uses the prng implementation described in
%   rand.mmh.
%
%   PUSHJ:
%   arg0 - pointer to memory block
%   no return value
%
%   Precondition:
%   arg0 must point to a valid, not yet freed memory region previously
%   allocated with :MM:Pool:Alloc.
%
% :MM:Pool:RandJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as
%   above.
%
% :MM:Pool:RandG
%   This variant passes arg0 through the global register :MM:t.
%
Pool:Rand   IS          :MM:__POOL:Rand
Pool:RandJ  IS          :MM:__POOL:RandJ
Pool:RandG  IS          :MM:__POOL:RandG

            PREFIX      :

#endif /* MM_POOL */
