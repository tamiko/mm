%%
% MMIX support library for various purposes.
%
% Copyright (C) 2013-2018 Matthias Maier <tamiko@kyomu.43-1.org>
%
% Permission is hereby granted, free of charge, to any person
% obtaining a copy of this software and associated documentation files
% (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of the Software,
% and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be
% included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%%

#ifndef MM_THREAD
#define MM_THREAD

            PREFIX      :MM:

%
% :MM:Thread:
%
% Routines for cooperative and preemptive (threaded) multitasking.
%
% This header file defines:
%   :MM:Thread:Enable (EnableG)
%   :MM:Thread:Disable
%   :MM:Thread:ThreadID (ThreadIDG)
%   :MM:Thread:Clone
%   :MM:Thread:Yield
%


%%
% :MM:Thread:Enable
%
%   Enable preemptive scheduling.
%
%   PUSHJ:
%   arg0 - timer interval in oops
%   no return value
%
Thread:Enable IS      :MM:__THREAD:Enable
Thread:EnableG IS     :MM:__THREAD:EnableG


%%
% :MM:Thread:Disable
%
%   Disable preemptive scheduling
%
%   PUSHJ:
%   no arguments
%   no return value
%
Thread:Disable  IS    :MM:__THREAD:Disable


%%
% :MM:Thread:ThreadID
%
%   Return the Thread ID.
%
%   PUSHJ:
%   no arguments
%   retm - ThreadID
%
Thread:ThreadID  IS   :MM:__THREAD:ThreadID
Thread:ThreadIDG IS   :MM:__THREAD:ThreadIDG


%%
% :MM:Thread:Clone
%
%   Create a new thread by cloning the execution context of the calling
%   thread.
%
%   PUSHJ:
%   no arguments
%   retm - ThreadID of clone
%
Thread:Clone  IS    :MM:__THREAD:Clone
Thread:CloneG IS    :MM:__THREAD:CloneG


%%
% :MM:Thread:Yield
%
%   Voluntarily relinguish the CPU and let the scheduler run another
%   thread.
%
%   PUSHJ:
%   no arguments
%   no return value
%
Thread:Yield  IS    :MM:__THREAD:Yield


            PREFIX      :

#endif /* MM_THREAD */
