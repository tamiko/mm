%%
% MMIX support library for various purposes.
%
% Copyright (C) 2013-2018 Matthias Maier <tamiko@kyomu.43-1.org>
%
% Permission is hereby granted, free of charge, to any person
% obtaining a copy of this software and associated documentation files
% (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of the Software,
% and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be
% included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%%

#ifndef MM_THREAD
#define MM_THREAD

            PREFIX      :MM:

%
% :MM:Thread:
%
% Routines for cooperative and preemptive (threaded) multitasking.
%
% This header file defines:
%   :MM:Thread:Enable (EnableJ, EnableG)
%   :MM:Thread:Disable
%   :MM:Thread:ThreadID (ThreadIDG)
%   :MM:Thread:Clone (CloneJ, CLoneG)
%   :MM:Thread:Yield
%   :MM:Thread:Exit
%


%%
% :MM:Thread:Enable
%
%   Enable preemptive scheduling.
%
%   PUSHJ:
%   arg0 - timer interval in oops
%   no return value
%
% :MM:Thread:EnableJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 (with no
%   return value) on failure instead of throwing an error message.
%   Same calling sequence as above.
%
% :MM:Thread:EnableG
%   This variant passes retm through the general register $255.
%
Thread:Enable IS      :MM:__THREAD:Enable
Thread:EnableJ IS     :MM:__THREAD:EnableJ
Thread:EnableG IS     :MM:__THREAD:EnableG


%%
% :MM:Thread:Disable
%
%   Disable preemptive scheduling
%
%   PUSHJ:
%   no arguments
%   no return value
%
Thread:Disable  IS    :MM:__THREAD:Disable


%%
% :MM:Thread:ThreadID
%
%   Return the Thread ID.
%
%   PUSHJ:
%   no arguments
%   retm - ThreadID
%
Thread:ThreadID  IS   :MM:__THREAD:ThreadID
Thread:ThreadIDG IS   :MM:__THREAD:ThreadIDG


%%
% :MM:Thread:Clone
%
%   Create a new thread by cloning the execution context of the calling
%   thread.
%
%   PUSHJ:
%   no arguments
%   retm - In context of calling thread the ThreadID of the clone, in
%          context of the cloned thread -1.
%
% :MM:Thread:CloneJ
%   This variant returns to :rJ+#4 in the calling thread (returning the
%   ThreadID of the clone) and to :rJ+#0 in the clone (no return value).
%
% :MM:Thread:CloneG
%   This variant passes retm through the general register $255.
%
Thread:Clone  IS    :MM:__THREAD:Clone
Thread:CloneJ IS    :MM:__THREAD:CloneJ
Thread:CloneG IS    :MM:__THREAD:CloneG


%%
% :MM:Thread:Create
%
%   Create a new thread by creating a ne execution context with main
%   address arg0.
%
%   PUSHJ:
%   arg0 - Entry address of new thread
%   retm - The ThreadID of the new thread
%
% :MM:Thread:CreateG
%   This variant passes retm through the general register $255.
%
Thread:Create  IS   :MM:__THREAD:Create
Thread:CreateG IS   :MM:__THREAD:CreateG


%%
% :MM:Thread:Yield
%
%   Voluntarily relinguish the CPU and let the scheduler run another
%   thread.
%
%   PUSHJ:
%   no arguments
%   no return value
%
Thread:Yield  IS    :MM:__THREAD:Yield


%%
% :MM:Thread:Exit
%
%   Exit thread.
%
%   PUSHJ:
%   no arguments
%   no return value
%
Thread:Exit  IS    :MM:__THREAD:Exit


%%
% :MM:Thread:IsRunning
%
%   Returns whether a thread with a ThreadID is in the thread ring.
%
%   PUSHJ
%   arg0 - ThreadID
%   retm - 0 if thread is running, -1 otherwise.
%
% :MM:Thread:IsRunningJ
%   This variant returns to :rJ+#4 if thread is running and to :rJ+#0
%   otherwise.
%
% :MM:Thread:IsRunningG
%   This variant passes arg0 through the general register $255.
%
Thread:IsRunning IS :MM:__THREAD:IsRunning
Thread:IsRunningJ IS :MM:__THREAD:IsRunningJ
Thread:IsRunningG IS :MM:__THREAD:IsRunningG


%%
% :MM:Thread:Wait
%
%   Wait for the thread with ThreadID arg0 to exit. This routine stalls
%   execution on the current thread by yielding repeatedly until the thread
%   with ThreadID exits.
%
%   PUSHJ
%   arg0 - ThreadID
%   no return values
%
% :MM:Thread:WaitG
%   This variant passes arg0 through the general register $255.
%
Thread:Wait  IS    :MM:__THREAD:Wait
Thread:WaitG IS    :MM:__THREAD:WaitG


%%
% :MM:Thread:LockMutex
%
%   Lock Mutex M8(arg0). The method waits (and yields) until a mutex is
%   acquired.
%
%   PUSHJ
%   arg0 - address of memory used as mutex
%   no return values
%
% :MM:Thread:LockMutexJ
%   This variant does not wait (or yield) but returns to :rJ+#4 if the
%   mutex could be locked successfully, otherwise :rJ+#0.
%
% :MM:Thread:LockMutexG
%   This variant passes arg0 through the general register $255.
%
Thread:LockMutex IS :MM:__THREAD:LockMutex
Thread:LockMutexJ IS :MM:__THREAD:LockMutexJ
Thread:LockMutexG IS :MM:__THREAD:LockMutexG


%%
% :MM:Thread:UnlockMutex
%
%   Unlocks a previously acquired mutex (M8(arg0)).
%
%   PUSHJ
%   arg0 - address of memory used as mutex
%   no return values
%
% :MM:Thread:UnlockMutexJ
%   This variant returns to :rJ+#4 on success and to :rJ+#0 on failure
%   instead of throwing an error message. Same calling sequence as above.
%
% :MM:Thread:UnlockMutexG
%   This variant passes arg0 through the general register $255.
%
Thread:UnlockMutex IS :MM:__THREAD:UnlockMutex
Thread:UnlockMutexG IS :MM:__THREAD:UnlockMutexG


            PREFIX      :

#endif /* MM_THREAD */
