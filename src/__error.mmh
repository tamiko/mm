%%
% MMIX support library for various purposes.
%
% Copyright (C) 2013-2014 Matthias Maier <tamiko@kyomu.43-1.org>
%
% Permission is hereby granted, free of charge, to any person
% obtaining a copy of this software and associated documentation files
% (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of the Software,
% and to permit persons to whom the Software is furnished to do so,
% subject to the following conditions:
%
% The above copyright notice and this permission notice shall be
% included in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%%

%
% :MM:__ERROR:
%
% Internal header file. Facilities for error messages and program
% termination.
%
% :MM:__ERROR:IError.*
%   Fatal, internal errors. Aborts the program by calling
%   :MM:Sys:Abort
%
% :MM:__ERROR:Error.*
%   Error condition caused by invalid user input. Respect Sys:AtError
%
%
            SWYM

#ifndef __MM_INTERNAL
#error Inclusion of internal header file __error.mmh
#endif

#ifndef __MM_ERROR_MMH
#define __MM_ERROR_MMH

            PREFIX      :MM:__ERROR:

Fputs       IS          :Fputs
StdErr      IS          :StdErr
Halt        IS          :Halt

t           IS          $255
arg0        IS          $0
arg1        IS          $1
arg2        IS          $2
arg3        IS          $3
arg4        IS          $4

%
% Internal error handler:
%

%%
% :MM:__ERROR:IError0
%   Print an internal error message and terminate the program.
%
% PUSHJ, JMP:
%   no parameters
%   - routine does not return -
%
IError0     LDA         t,:MM:__STRS:InternErro
            TRAP        0,Fputs,StdErr
            PUSHJ       t,:MM:__SYS:Abort

%%
% :MM:__ERROR:IError1
%   Print an internal error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   - routine does not return -
%
IError1     LDA         t,:MM:__STRS:InternErro
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            PUSHJ       t,:MM:__SYS:Abort

%%
% :MM:__ERROR:IError2
%   Print an internal error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   arg1 - address of an error string
%   - routine does not return -
%
IError2     LDA         t,:MM:__STRS:InternErro
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            SET         t,arg1
            TRAP        0,Fputs,StdErr
            PUSHJ       t,:MM:__SYS:Abort

%%
% :MM:__ERROR:IError4R3
%   Print an internal error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   arg1 - address of an error string
%   arg2 - Octa to print between arg0 and arg2
%   arg3 - address of an error string
%   - routine does not return -
%
IError4R3   LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            SET         t,arg1
            TRAP        0,Fputs,StdErr
            SET         t,arg2
            GET         $0,:rJ
            PUSHJ       t,:MM:__PRINT:RegG
            PUT         :rJ,$0
            SET         t,arg3
            TRAP        0,Fputs,StdErr
            PUSHJ       t,:MM:__SYS:Abort

%
% Error condition caused by invalid user input. Respect Sys:AtError
%

%%
% :MM:__ERROR:Error0
%   Print an error message and terminate the program.
%
% PUSHJ, JMP:
%   no parameters
%   - routine does not return -
%
Error0      LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            JMP         ErrorHndl

%%
% :MM:__ERROR:Error1
%   Print an error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   - routine does not return -
%
Error1      LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            JMP         ErrorHndl

%%
% :MM:__ERROR:Error2
%   Print an error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   arg1 - address of an error string
%   - routine does not return -
%
Error2      LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            SET         t,arg1
            TRAP        0,Fputs,StdErr
            JMP         ErrorHndl

%%
% :MM:__ERROR:Error3R2
%   Print an error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   arg1 - Octa to print between arg0 and arg2
%   arg2 - address of an error string
%   - routine does not return -
%
Error3R2    LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            SET         t,arg1
            GET         $0,:rJ
            PUSHJ       t,:MM:__PRINT:RegG
            PUT         :rJ,$0
            SET         t,arg2
            TRAP        0,Fputs,StdErr
            JMP         ErrorHndl

%%
% :MM:__ERROR:Error3RB2
%   Print an error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   arg1 - Octa to print between arg0 and arg2
%   arg2 - address of an error string
%   - routine does not return -
%
Error3RB2   LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            SET         t,arg1
            GET         $0,:rJ
            PUSHJ       t,:MM:__PRINT:ByteG
            PUT         :rJ,$0
            SET         t,arg2
            TRAP        0,Fputs,StdErr
            JMP         ErrorHndl

%%
% :MM:__ERROR:Error5R24
%   Print an error message and terminate the program.
%
% PUSHJ, JMP:
%   arg0 - address of an error string
%   arg1 - Octa to print between arg0 and arg2
%   arg2 - address of an error string
%   arg3 - Octa to print between arg2 and arg4
%   arg4 - address of an error string
%   - routine does not return -
%
Error5R24   LDA         t,:MM:__STRS:Error
            TRAP        0,Fputs,StdErr
            SET         t,arg0
            TRAP        0,Fputs,StdErr
            SET         t,arg1
            GET         $0,:rJ
            PUSHJ       t,:MM:__PRINT:RegG
            PUT         :rJ,$0
            SET         t,arg2
            TRAP        0,Fputs,StdErr
            SET         t,arg3
            GET         $0,:rJ
            PUSHJ       t,:MM:__PRINT:RegG
            PUT         :rJ,$0
            SET         t,arg4
            TRAP        0,Fputs,StdErr
            JMP         ErrorHndl

            % Respect a possible error handler:
ErrorHndl   LDA         $0,:MM:__SYS:AtErrorAddr
            LDO         $0,$0
            BZ          $0,1F
            GO          $0,$0
            % Notify the fact that an error handler returned:
            LDA         t,:MM:__STRS:ErrorHndlR1
            TRAP        0,Fputs,StdErr
            LDA         t,:MM:__SYS:AtErrorAddr
            LDO         t,t
            GET         $0,:rJ
            PUSHJ       t,:MM:__PRINT:RegG
            PUT         :rJ,$0
            LDA         t,:MM:__STRS:ErrorHndlR2
            TRAP        0,Fputs,StdErr
2H          LDA         t,:MM:__STRS:Continued
            TRAP        0,Fputs,StdErr
            POP         0,0 % Feeling lucky...
1H          LDA         t,:MM:__STRS:Terminated
            TRAP        0,Fputs,StdErr
            PUSHJ       t,:MM:__SYS:Abort
            SET         t,42
            TRAP        0,Halt,0

            PREFIX      :

#endif /* __MM_ERROR_MMH */
